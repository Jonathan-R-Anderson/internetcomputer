#!/usr/bin/env python3
"""
Convert the compiled shell binary to a D array for embedding in the kernel filesystem.
This ensures the real D shell is available as /bin/sh in the kernel's in-memory filesystem.
"""

import sys
import os

def convert_binary_to_d_array(binary_file, output_file):
    """Convert binary file to D array format."""
    
    if not os.path.exists(binary_file):
        print(f"Error: Binary file {binary_file} not found")
        return False
        
    # Read the binary file
    with open(binary_file, 'rb') as f:
        data = f.read()
    
    if len(data) == 0:
        print(f"Error: Binary file {binary_file} is empty")
        return False
        
    print(f"Converting {len(data)} bytes from {binary_file}")
    
    # Generate D array code
    d_code = f"""// Auto-generated embedded shell binary
// Source: {binary_file}
// Size: {len(data)} bytes
// Generated by: {__file__}

__gshared immutable ubyte[] embedded_shell_binary = [
"""
    
    # Write data in chunks of 12 bytes per line for readability
    for i in range(0, len(data), 12):
        chunk = data[i:i+12]
        hex_values = ', '.join(f'0x{b:02x}' for b in chunk)
        d_code += f"    {hex_values},\n"
    
    # Remove the last comma and close the array
    d_code = d_code.rstrip(',\n') + '\n'
    d_code += "];\n"
    
    # Write to output file
    with open(output_file, 'w') as f:
        f.write(d_code)
    
    print(f"Generated D array with {len(data)} bytes in {output_file}")
    return True

def main():
    # Default paths
    binary_file = "build/bin/sh"
    output_file = "embedded_shell_binary.d"
    
    if len(sys.argv) > 1:
        binary_file = sys.argv[1]
    if len(sys.argv) > 2:
        output_file = sys.argv[2]
        
    if convert_binary_to_d_array(binary_file, output_file):
        print("✅ Shell binary embedded successfully!")
        print(f"   Include this file in the kernel filesystem module")
        print(f"   or copy the array content to modules/microkernel/kernel/fs.d")
    else:
        print("❌ Failed to embed shell binary")
        sys.exit(1)

if __name__ == "__main__":
    main() 